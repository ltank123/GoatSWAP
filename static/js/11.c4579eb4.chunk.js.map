{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","CakeWinnings","claimAmount","useTotalClaim","cakeAmount","claimAmountBusd","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","lotteryPrizeAmountCake","toLocaleString","maximumFractionDigits","lotteryPrizeAmountBusd","amount","StyledLotteryCard","LotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","onPresentApprove","onMultiClaim","useMultiClaimLottery","useApproval","handleApprove","requestedApproval","handleClaim","console","error","max","tokenName","onPresentBuy","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApy","useMemo","apys","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","symbol","toLowerCase","totalLiquidity","times","getFarmApy","poolWeight","maxApy","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","useLotteryTotalPrizesUsd","totalRewards","WinCard","lotteryPrize","Math","round","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","computed","result","other"],"mappings":"qYAyCeA,EA3Ba,WAAO,IAAD,EACkBC,mBAA4B,IAD9C,mBACzBC,EADyB,KACNC,EADM,KAExBC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAK,EAAA,6DACdC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJD,SAOKe,YAAUC,EAAeV,GAP9B,OAOdW,EAPc,OAQdC,EAAUX,IAAYC,KAAI,SAACC,EAAMU,GAAP,mBAAC,eAAsBV,GAAvB,IAA6BW,QAAS,IAAIC,IAAUJ,EAAWE,SAE/FpB,EAAqBmB,GAVD,2CAAH,oDAcjBI,KAED,CAACtB,EAASE,IAENJ,G,SCJMyB,EA1BQ,WAAO,IAAD,EACI1B,mBAAS,IADb,mBACpB2B,EADoB,KACVC,EADU,KAEnBzB,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAK,EAAA,6DACjBC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJE,SAOLe,YAAUC,EAAeV,GAPpB,OAOjBoB,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAAC3B,EAASE,IAENsB,G,wBCgBMI,EAjC6B,SAAC,GAQtC,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SAMI,IALJC,gBAKI,MALO,OAKP,MAJJC,kBAII,MAJS,IAIT,MAHJC,cAGI,MAHK,GAGL,MAFJC,YAEI,aADJC,aACI,MADI,OACJ,IACwBC,qBAAW,CACrCC,MAAO,EACPC,IAAKT,EACLU,SAAU,EACVC,UAAW,IACXV,cAEeW,IAAbX,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEa,EADJ,EACIA,QAASC,EADb,EACaA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAvC,qBAAU,WACRwC,EAAYE,QAAQjB,KACnB,CAACA,EAAOe,IAGT,eAAC,KAAD,CAAMV,KAAMA,EAAMH,SAAUA,EAAUgB,MAAO,CAAEf,cAAcG,MAAOA,EAApE,UACGF,EACAS,MCjCQM,GANiC,SAACC,GAC/C,OACE,cAAC,EAAD,aAAWlB,SAAS,OAAOC,WAAW,MAAMG,MAAM,aAAaF,OAAO,KAAKC,MAAM,EAAOJ,SAAU,GAAOmB,KCMvGC,GAAQC,IAAOC,IAAV,uDA8BIC,GAzBY,WACzB,IAAMC,EAAkBC,cAChBvD,EAAYC,cAAZD,QAEFwD,EADcjC,IACYkC,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAIrC,IAAUsC,GAASP,IAAI,IAAI/B,IAAU,IAAIuC,IAAI,KAAKC,aACpE,GACGC,EAAe,IAAIzC,IAAUmC,GAAaO,aAAaC,eAAoBH,WAEjF,OAAK7D,EASH,eAACkD,GAAD,WACE,cAAC,EAAD,CAAWrB,MAAO2B,EAAaxB,WAAW,QAC1C,cAAC,GAAD,CAAeH,MAAOiC,OATtB,cAAC,KAAD,CAAM3B,MAAM,eAAeY,MAAO,CAAEf,WAAY,QAAhD,SACGsB,EAAgB,IAAK,a,mBCMfW,GAtBW,WACxB,IAAMX,EAAkBC,cAClBW,EAAcC,aAAgBC,eAC9BC,EAAc,IAAIhD,YAAUiD,aAAiBJ,IAAcH,aAAaC,eAAoBH,WAGlG,OAFoB5D,cAAZD,QAWN,qCACE,cAAC,EAAD,CAAW6B,MAAOyC,aAAiBJ,GAAcpC,SAAU,EAAGC,SAAS,OAAOC,WAAW,SACzF,cAAC,GAAD,CAAeH,MAAOwC,OATtB,cAAC,KAAD,CAAMlC,MAAM,eAAeY,MAAO,CAAEf,WAAY,QAAhD,SACGsB,EAAgB,IAAK,aCVxBiB,GAAwBpB,YAAOqB,IAAPrB,CAAH,uKAOrBD,GAAQC,IAAOC,IAAV,oDAILqB,GAAYtB,IAAOuB,IAAV,oDAITC,GAAQxB,IAAOC,IAAV,+DACA,qBAAGwB,MAAkBC,OAAOC,cAIjCC,GAAU5B,IAAOC,IAAV,iDA8DE4B,GA1DW,WAAO,IAAD,EACInF,oBAAS,GADb,mBACvBoF,EADuB,KACZC,EADY,KAEtBlF,EAAYC,cAAZD,QACFsD,EAAkBC,cAElB4B,EADmBvF,IACkBwF,QAAO,SAACC,GAAD,OAAiBA,EAAYjE,QAAQyC,WAAa,KAE5FyB,EAAaC,YAAcJ,EAAkB3E,KAAI,SAACgF,GAAD,OAAqBA,EAAgB1E,QAAtFwE,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAArF,EAAA,6DAClC6E,GAAa,GADqB,kBAG1BI,IAH0B,6EAOhCJ,GAAa,GAPmB,0EASjC,CAACI,IAEJ,OACE,cAACf,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASoB,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,qBAExB,cAACmB,GAAD,CAAWoB,IAAI,mBAAmBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACrE,eAAC,GAAD,WACE,eAACrB,GAAD,WAAQrB,EAAgB,IAAK,mBAA7B,OACA,cAAC,GAAD,OAEF,eAAC,GAAD,WACE,eAACqB,GAAD,WAAQrB,EAAgB,IAAK,kBAA7B,OACA,cAAC,GAAD,OAEF,cAACyB,GAAD,UACG/E,EACC,cAAC,IAAD,CACEiG,GAAG,cACHC,SAAUf,EAAkBgB,QAAU,GAAKlB,EAC3CmB,QAASX,EACTM,MAAM,OAJR,SAMGd,EACG3B,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsB6B,EAAkBgB,OAAxC,KAAmD,CAChEE,MAAOlB,EAAkBgB,WAIjC,cAACG,EAAA,EAAD,CAAcP,MAAM,iB,sECzE1B7C,GAAQC,IAAOC,IAAV,oDA2BImD,GAvBM,WACnB,IAAMjD,EAAkBC,cAChBvD,EAAYC,cAAZD,QACAwG,EAAgBC,eAAhBD,YACFE,EAAapC,aAAiBkC,GAC9BG,EAAkB,IAAItF,YAAUqF,GAAY3C,aAAaC,eAAoBH,WAEnF,OAAK7D,EASH,eAAC,GAAD,WACE,cAAC,EAAD,CAAW6B,MAAO6E,EAAY1E,WAAW,QACpB,IAApB2E,GAAyB,cAAC,GAAD,CAAe9E,MAAO8E,EAAiB7E,SAAU,OAT3E,cAAC,KAAD,CAAMK,MAAM,eAAeY,MAAO,CAAEf,WAAY,QAAhD,SACGsB,EAAgB,IAAK,aCEfsD,GAnBQ,WACrB,IAAMtD,EAAkBC,cAClBsD,EAAqBC,eACrB1F,EAAUkD,aAAiBuC,GAC3BE,EAAyB3F,EAAQ4F,oBAAevE,EAAW,CAC/DwE,sBAAuB,IAEnBC,EAAyB,IAAI7F,YAAUD,GAAS2C,aAAaC,eAAoBH,WAEvF,OACE,qCACE,cAAC,KAAD,CAAM3B,MAAI,EAACH,SAAS,OAAOgB,MAAO,CAAEf,WAAY,OAAhD,SACGsB,EAAgB,IAAD,UAASyD,EAAT,SAAwC,CAAEI,OAAQJ,MAExC,IAA3BG,GAAgC,cAAC,GAAD,CAAerF,MAAOqF,QCJvDE,GAAoBjE,YAAOqB,IAAPrB,CAAH,yKAOjBD,GAAQC,IAAOC,IAAV,oDAILqB,GAAYtB,IAAOuB,IAAV,oDAITC,GAAQxB,IAAOC,IAAV,+DACA,qBAAGwB,MAAkBC,OAAOC,cAIjCC,GAAU5B,IAAOC,IAAV,wGAuFEiE,GA/EK,WAAO,IACjBrH,EAAYC,cAAZD,QACFsH,EAAkBC,eAFA,EAGmB1H,oBAAS,GAH5B,mBAGjB2H,EAHiB,KAGFC,EAHE,KAIlBnE,EAAkBC,cAClBmE,EAAYC,eALM,EAMGC,aAAS,cAACC,GAAA,EAAD,KAA7BC,EANiB,oBAOhBtB,EAAgBC,eAAhBD,YACAuB,EAAiBC,eAAjBD,aACF7D,EAAcC,aAAgBC,eATZ,EAUqB6D,aAAYH,GAAjDI,EAVgB,EAUhBA,cAAeC,EAVC,EAUDA,kBAEjBC,EAAc1C,sBAAW,sBAAC,sBAAArF,EAAA,sEAE5BoH,GAAkB,GAFU,SAGPM,IAHO,eAM1BN,GAAkB,GANQ,gDAS5BY,QAAQC,MAAR,MAT4B,yDAW7B,CAACP,EAAcN,IAvBM,EAwCDG,aAAS,cAAC,KAAD,CAAUW,IAAKrE,EAAasE,UAAU,UAA/DC,EAxCiB,oBA0CxB,OACE,cAACrB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASzB,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,2BAExB,cAAC,GAAD,CAAWuC,IAAI,qBAAqBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACvE,eAAC,GAAD,WACE,eAAC,GAAD,WAAQ1C,EAAgB,IAAK,mBAA7B,OACA,cAAC,GAAD,OAEF,eAAC,GAAD,WACE,eAAC,GAAD,WAAQA,EAAgB,IAAK,4BAA7B,OACA,cAAC,GAAD,OAEDtD,EACC,eAAC,GAAD,WACE,cAAC,IAAD,CACEiG,GAAG,6BACHC,SAA4C,IAAlC5B,aAAiBkC,IAAsBgB,EACjDpB,QAASgC,EACTrF,MAAO,CAAE2F,YAAa,OAJxB,SAMGpF,EAAgB,IAAK,sBAvC3BoE,EAAU7D,WAQb,cAAC,IAAD,CAAQoC,GAAG,wBAAwB0C,QAAQ,YAAYvC,QAASqC,EAAcvC,SAAUoB,EAAxF,SACGhE,EAAgB,IAAK,iBAPtB,cAAC,IAAD,CAAQyC,MAAM,OAAOG,SAAUiC,EAAmB/B,QAAS8B,EAA3D,SACG5E,EAAgB,IAAK,qBAyCtB,cAAC,GAAD,UACE,cAACgD,EAAA,EAAD,CAAcP,MAAM,iBC7G1B6C,GAAkBzF,YAAOqB,IAAPrB,CAAH,yEAKf0F,GAAM1F,IAAOC,IAAV,oJAqCM0F,GA7BG,WAChB,IAAMxF,EAAkBC,cAClBwF,EAAcC,eACdC,EAAgB3E,aAAiB4E,aAAiB9E,gBAClD+E,EAAaJ,EAAczE,aAAiByE,GAAeE,EAAgB,EAEjF,OACE,cAACL,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASjD,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,gBAExB,eAACuF,GAAD,WACE,cAAC,KAAD,CAAM9G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,uBAC3C6F,GAAc,cAAC,EAAD,CAAWpH,SAAS,OAAOF,MAAOsH,OAEnD,eAACN,GAAD,WACE,cAAC,KAAD,CAAM9G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,uBAC5C,cAAC,EAAD,CAAWvB,SAAS,OAAOD,SAAU,EAAGD,MAAOoH,OAEjD,eAACJ,GAAD,WACE,cAAC,KAAD,CAAM9G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,oBAC5C,cAAC,EAAD,CAAWvB,SAAS,OAAOD,SAAU,EAAGD,MAAO,cCtCnDuH,GAA6BjG,YAAOqB,IAAPrB,CAAH,kFAgCjBkG,GA1Bc,WAC3B,IAAM/F,EAAkBC,cAClB+F,ECemB,WAAO,IAAD,EACPzJ,mBAAiC,MAD1B,mBACxByJ,EADwB,KAClBC,EADkB,KAkB/B,OAfAnJ,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAESmJ,MAAM,GAAD,OA7Bb,qCA6Ba,UAFd,cAERC,EAFQ,gBAG8BA,EAASC,OAHvC,OAGRC,EAHQ,OAKdJ,EAAQI,GALM,kDAOdtB,QAAQC,MAAM,wBAAd,MAPc,0DAAH,oDAWfsB,KACC,CAACL,IAEGD,EDjCMO,GACPC,EAAMR,EAAOA,EAAKS,uBAAuB/C,eAAe,QAAS,CAAEC,sBAAuB,IAAO,KAEvG,OACE,cAACmC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASzD,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,8BAEvBgG,EACC,qCACE,cAAC,IAAD,CAAS3D,KAAK,KAAd,oBAAwBmE,KACxB,cAAC,KAAD,CAAM3H,MAAM,aAAZ,SAA0BmB,EAAgB,IAAK,uCAGjD,mCACE,cAAC,KAAD,CAAU0C,OAAQ,a,wCEpBxBzB,GAAwBpB,YAAOqB,IAAPrB,CAAH,+IAKvB,qBAAGyB,MAAkBoF,aAAaC,MAKhCC,GAAiB/G,YAAOgH,KAASC,MAAM,CAAEzE,KAAM,MAA9BxC,CAAH,kDAoDLkH,GAjDK,WAClB,IAAM/G,EAAkBC,cAClB+G,EAAUC,cACVC,EAASC,cACTC,EAAY1G,cAEZ2G,EAAaC,mBAAQ,WACzB,IAAMC,EAAOP,EAEVlF,QAAO,SAAC3E,GAAD,OAAuB,IAAbA,EAAKK,KAAiC,OAApBL,EAAKqK,cACxCtK,KAAI,SAACC,GACJ,GAAIA,EAAKsK,qBAAuBP,EAAQ,CACtC,IAAMQ,EAAqBR,EAAO/J,EAAKwK,WAAWC,OAAOC,eACnDC,EAAiB,IAAI/J,IAAUZ,EAAKsK,qBAAqBM,MAAML,GACrE,OAAOM,aAAW7K,EAAK8K,WAAYb,EAAWU,GAEhD,OAAO,QAGLI,EAASjD,KAAIsC,GACnB,cAAOW,QAAP,IAAOA,OAAP,EAAOA,EAAQxE,eAAe,QAAS,CAAEC,sBAAuB,MAC/D,CAACyD,EAAWJ,EAASE,IAExB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASrI,MAAM,WAAWwD,KAAK,KAA/B,wBAGA,cAACuE,GAAD,CAAgB/H,MAAM,UAAtB,SACGwI,EAAU,UACNA,EADM,aACSrH,EAAgB,IAAK,QAEvC,cAAC,KAAD,CAAUmI,UAAU,QAAQ9C,QAAQ,OAAO3C,OAAO,WAGtD,eAAC,IAAD,CAAM0F,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvJ,MAAM,WAAWwD,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAASgG,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS5F,GAAG,eAAvD,SACE,cAAC,IAAD,CAAkB6F,GAAI,GAAI3J,MAAM,uB,uCCxDtCoC,GAAwBpB,YAAOqB,IAAPrB,CAAH,+LAKvB,qBAAGyB,MAAkBoF,aAAaC,MAKhCC,GAAiB/G,YAAOgH,KAASC,MAAM,CAAEzE,KAAM,MAA9BxC,CAAH,kDA6BL4I,GA1BO,WACpB,IAAMC,EAAqBC,KAAM7G,QAAO,SAAC8G,GAAD,OAAWA,EAAKC,aAAeD,EAAKE,aAAalB,OAAOmB,SAAS,WACnGC,EAAsBC,KAAQP,EAAoB,CAAC,YAAa,OAAQ,CAAC,OAAQ,SAASQ,MAAM,EAAG,GAEnGC,EAAS,CAAC,QAAD,oBAAYH,EAAY9L,KAAI,SAAC0L,GAAD,OAAUA,EAAKE,aAAalB,YAASwB,KAAK,MAErF,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASvK,MAAM,WAAWwD,KAAK,KAA/B,kBAGA,cAAC,GAAD,CAAgBxD,MAAM,mBAAtB,SAA0CsK,IAC1C,eAAC,IAAD,CAAMf,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvJ,MAAM,WAAWwD,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAASgG,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS5F,GAAG,WAAvD,SACE,cAAC,IAAD,CAAkB6F,GAAI,GAAI3J,MAAM,uBC3B7BwK,GARkB,WAC/B,IAAMC,EAAe9F,eAIrB,OAHkBxC,aAAiBsI,GACb5I,cAEWH,YCH7BU,GAAwBpB,YAAOqB,IAAPrB,CAAH,+IAKvB,qBAAGyB,MAAkBoF,aAAaC,MAKhCC,GAAiB/G,YAAOgH,KAASC,MAAM,CAAEzE,KAAM,MAA9BxC,CAAH,kDAgCL0J,GA7BC,WACd,IAAMC,EAAeC,KAAKC,MAAML,MAEhC,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASxK,MAAM,WAAWwD,KAAK,KAA/B,0BAGA,cAAC,GAAD,CAAgBxD,MAAM,UAAtB,SACoB,IAAjB2K,EAAA,WACKA,EAAa9F,kBAEjB,cAAC,KAAD,CAAUyE,UAAU,QAAQ9C,QAAQ,OAAO3C,OAAO,WAGtD,eAAC,IAAD,CAAM0F,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvJ,MAAM,WAAWwD,KAAK,KAA/B,0BAGA,cAAC,KAAD,CAASgG,OAAK,EAACC,gBAAgB,SAASC,GAAG,WAAW5F,GAAG,kBAAzD,SACE,cAAC,IAAD,CAAkB6F,GAAI,GAAI3J,MAAM,uBC3BtC8K,GAAO9J,IAAOC,IAAV,4gBAaN,qBAAGwB,MAAkBoF,aAAaC,MAQhCiD,GAAQ/J,YAAOgK,IAAPhK,CAAH,8SAUP,qBAAGyB,MAAkBoF,aAAaoD,MAMlC,qBAAGxI,MAAkBoF,aAAaC,MAOhCoD,GAAWlK,YAAOgK,IAAPhK,CAAH,6PAQV,qBAAGyB,MAAkBoF,aAAaoD,MAMlC,qBAAGxI,MAAkBoF,aAAaC,MAqCvBqD,GA9BQ,WACrB,IAAMhK,EAAkBC,cAExB,OACE,eAACgK,EAAA,EAAD,WACE,eAACN,GAAD,WACE,cAAC,IAAD,CAASO,GAAG,KAAK7H,KAAK,KAAKC,GAAG,OAAOzD,MAAM,YAA3C,SACGmB,EAAgB,IAAK,iBAExB,cAAC,KAAD,UAAOA,EAAgB,IAAK,0DAE9B,gCACE,eAAC4J,GAAD,WACE,cAACO,GAAD,IACA,cAAC,GAAD,OAEF,eAACJ,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEF,eAACH,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,e,oBCrGV,IAAIQ,EAAeC,EAAQ,KACvBC,EAASD,EAAQ,KACjBE,EAAWF,EAAQ,KA0BvBG,EAAOC,QANP,SAAaC,GACX,OAAQA,GAASA,EAAM7H,OACnBuH,EAAaM,EAAOH,EAAUD,QAC9BnL,I,oBCzBN,IAAIwL,EAAWN,EAAQ,KA+BvBG,EAAOC,QAnBP,SAAsBC,EAAOE,EAAUC,GAIrC,IAHA,IAAIhN,GAAS,EACTgF,EAAS6H,EAAM7H,SAEVhF,EAAQgF,GAAQ,CACvB,IAAItE,EAAQmM,EAAM7M,GACd2B,EAAUoL,EAASrM,GAEvB,GAAe,MAAXiB,SAAiCL,IAAb2L,EACftL,IAAYA,IAAYmL,EAASnL,GAClCqL,EAAWrL,EAASsL,IAE1B,IAAIA,EAAWtL,EACXuL,EAASxM,EAGjB,OAAOwM,I,kBCfTP,EAAOC,QAJP,SAAgBlM,EAAOyM,GACrB,OAAOzM,EAAQyM","file":"static/js/11.c4579eb4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n}\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      <CardBusdValue value={earningsBusd} />\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      <CardBusdValue value={busdBalance} />\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeWinnings = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const cakeAmount = getBalanceNumber(claimAmount)\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\n      {claimAmountBusd !== 0 && <CardBusdValue value={claimAmountBusd} decimals={2} />}\n    </Block>\n  )\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardBusdValue from './CardBusdValue'\n\nconst LotteryJackpot = () => {\n  const TranslateString = useI18n()\n  const lotteryPrizeAmount = useTotalRewards()\n  const balance = getBalanceNumber(lotteryPrizeAmount)\n  const lotteryPrizeAmountCake = balance.toLocaleString(undefined, {\n    maximumFractionDigits: 2,\n  })\n  const lotteryPrizeAmountBusd = new BigNumber(balance).multipliedBy(usePriceCakeBusd()).toNumber()\n\n  return (\n    <>\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\n        {TranslateString(999, `${lotteryPrizeAmountCake} CAKE`, { amount: lotteryPrizeAmountCake })}\n      </Text>\n      {lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}\n    </>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst LotteryCard = () => {\n  const { account } = useWeb3React()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requesteClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n          {TranslateString(494, 'Approve CAKE')}\n        </Button>\n      )\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n        {TranslateString(558, 'Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(550, 'Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(552, 'CAKE to Collect')}:</Label>\n          <CakeWinnings />\n        </Block>\n        <Block>\n          <Label>{TranslateString(554, 'Total jackpot this round')}:</Label>\n          <LotteryJackpot />\n        </Block>\n        {account ? (\n          <Actions>\n            <Button\n              id=\"dashboard-collect-winnings\"\n              disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\n              onClick={handleClaim}\n              style={{ marginRight: '8px' }}\n            >\n              {TranslateString(556, 'Collect Winnings')}\n            </Button>\n            {renderLotteryTicketButtonBuyOrApprove()}\n          </Actions>\n        ) : (\n          <Actions>\n            <UnlockButton width=\"100%\" />\n          </Actions>\n        )}\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default LotteryCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/stat`)\n        const responsedata: ApiStatResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApy } from 'utils/apy'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const prices = useGetApiPrices()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApy = useMemo(() => {\n    const apys = farmsLP\n      // Filter inactive farms, because their theoretical APY is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApy(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApy = max(apys)\n    return maxApy?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {highestApy ? (\n            `${highestApy}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include CAKE\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from './useTickets'\n\nconst useLotteryTotalPrizesUsd = () => {\n  const totalRewards = useTotalRewards()\n  const totalCake = getBalanceNumber(totalRewards)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  return totalCake * cakePriceBusd.toNumber()\n}\n\nexport default useLotteryTotalPrizesUsd\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd())\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Lottery with\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {lotteryPrize !== 0 ? (\n            `$${lotteryPrize.toLocaleString()}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            up for grabs\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'PancakeSwap')}\n        </Heading>\n        <Text>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPYCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}